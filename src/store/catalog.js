import { defineStore } from 'pinia'
import { loadCatalog, getLists } from '../api/googleApi'
import { getTelegramUserId } from '../utils/telegram'

export const useCatalogStore = defineStore('catalog', {
  state: () => ({
    // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    stores: [],
    categories: [],
    catalog: [],
    
    // –î–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userLists: [],
    currentUserId: null, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ø–∏—Å–∫–∏
    
    // –§–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoadingCatalog: false,
    isLoadingLists: false,
    
    // –§–ª–∞–≥, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    catalogLoaded: false,
    listsLoaded: false,
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞)
    catalogLoadedAt: null,
    listsLoadedAt: null,
  }),
  
  getters: {
    // –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø–æ ID
    getStoreById: (state) => (id) => {
      return state.stores.find(s => s.id === id)
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
    getCategoryById: (state) => (id) => {
      return state.categories.find(c => c.id === id)
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
    getProductById: (state) => (id) => {
      return state.catalog.find(p => p.id === id)
    },
  },
  
  actions: {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    async fetchCatalog(forceReload = false) {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      if (this.catalogLoaded && !forceReload) {
        console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥')
        return { stores: this.stores, categories: this.categories, catalog: this.catalog }
      }
      
      // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –∂–¥—ë–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (this.isLoadingCatalog) {
        console.log('‚è≥ –ö–∞—Ç–∞–ª–æ–≥ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...')
        // –ñ–¥—ë–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
        while (this.isLoadingCatalog) {
          await new Promise(resolve => setTimeout(resolve, 100))
        }
        return { stores: this.stores, categories: this.categories, catalog: this.catalog }
      }
      
      this.isLoadingCatalog = true
      
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞...')
        const data = await loadCatalog()
        
        this.stores = data.stores || []
        this.categories = data.categories || []
        this.catalog = data.catalog || []
        this.catalogLoaded = true
        this.catalogLoadedAt = Date.now()
        
        console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω:', {
          stores: this.stores.length,
          categories: this.categories.length,
          products: this.catalog.length
        })
        
        return data
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error)
        throw error
      } finally {
        this.isLoadingCatalog = false
      }
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    async fetchUserLists(forceReload = false) {
      const userId = getTelegramUserId()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (this.currentUserId !== userId) {
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${this.currentUserId} ‚Üí ${userId}`)
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.invalidateLists()
        this.currentUserId = userId
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      if (this.listsLoaded && !forceReload) {
        console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
        return this.userLists
      }
      
      // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –∂–¥—ë–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      if (this.isLoadingLists) {
        console.log('‚è≥ –°–ø–∏—Å–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º...')
        while (this.isLoadingLists) {
          await new Promise(resolve => setTimeout(resolve, 100))
        }
        return this.userLists
      }
      
      this.isLoadingLists = true
      
      try {
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å —Å–µ—Ä–≤–µ—Ä–∞...`)
        const response = await getLists(userId)
        
        this.userLists = response.lists || []
        this.currentUserId = userId
        this.listsLoaded = true
        this.listsLoadedAt = Date.now()
        
        console.log(`‚úÖ –°–ø–∏—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, this.userLists.length)
        
        return this.userLists
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤:', error)
        throw error
      } finally {
        this.isLoadingLists = false
      }
    },
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∫–∞—Ç–∞–ª–æ–≥–∞
    invalidateCatalog() {
      this.catalogLoaded = false
      this.catalogLoadedAt = null
    },
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à —Å–ø–∏—Å–∫–æ–≤
    invalidateLists() {
      this.listsLoaded = false
      this.listsLoadedAt = null
      this.userLists = []
      this.currentUserId = null
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫—ç—à–µ
    updateListInCache(updatedList) {
      const index = this.userLists.findIndex(l => l.list_id === updatedList.list_id)
      if (index !== -1) {
        this.userLists[index] = updatedList
      }
    },
    
    // –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ –∫—ç—à–∞
    removeListFromCache(listId) {
      this.userLists = this.userLists.filter(l => l.list_id !== listId)
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫—ç—à
    addListToCache(newList) {
      this.userLists.push(newList)
    },
  }
})

